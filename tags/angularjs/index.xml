<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>AngularJS on Null</title><link>https://gikey.github.io/tags/angularjs/</link><description>Recent content in AngularJS on Null</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Wed, 08 Mar 2017 11:39:09 +0800</lastBuildDate><atom:link href="https://gikey.github.io/tags/angularjs/index.xml" rel="self" type="application/rss+xml"/><item><title>AngularJS Directive 隔离 Scope 数据交互</title><link>https://gikey.github.io/post/ng-scope/</link><pubDate>Wed, 08 Mar 2017 11:39:09 +0800</pubDate><guid>https://gikey.github.io/post/ng-scope/</guid><description>什么是隔离 Scope AngularJS 的 directive 默认能共享父 scope 中定义的属性，例如在模版中直接使用父 scope 中的对象和属性。通常使用这种直接共享的方式可以实现一些简单的 directive 功能。当你需要创建一个可重复使用的 directive，只是偶尔需要访问或者修改父 scope 的数据，就需要使用隔离 scope。当使用隔离 scope 的时候，directive 会创建一个没有依赖父 scope 的 scope，并提供一些访问父 scope 的方式。
为什么使用隔离 Scope 当你想要写一个可重复使用的 directive，不能再依赖父 scope，这时候就需要使用隔离 scope 代替。共享 scope 可以直接共享父 scope，而隔离 scope 无法共享父scope。下图解释共享 scope 和隔离 scope 的区别：
共享 scope 使用共享 scope 的时候，可以直接从父 scope 中共享属性。因此下面示例可以将那么属性的值输出出来。使用的是父 scope 中定义的值。
js代码：
app.controller(&amp;#34;myController&amp;#34;, function ($scope) { $scope.name = &amp;#34;hello world&amp;#34;; }).directive(&amp;#34;shareDirective&amp;#34;, function () { return { template: &amp;#39;Say:{{name}}&amp;#39; } }); html代码:
&amp;lt;div ng-controller=&amp;#34;myController&amp;#34;&amp;gt; &amp;lt;div share-directive=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 输出结果：</description></item></channel></rss>